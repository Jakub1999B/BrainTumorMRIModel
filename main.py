# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m_Ly5tVxfQPDyyfBcajB7zSapudNb9yI
"""

import os
import sys
sys.path.append("/content/drive/MyDrive/BrainTumorMRIModel")
import numpy as np
import pandas as pd
import tensorflow as tf
import matplotlib.pyplot as plt
from tensorflow import keras
from skimage import color
from skimage import io
import sklearn
from tqdm import tqdm
import cv2
import seaborn as sns
from keras import layers
from sklearn.model_selection import train_test_split
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras import datasets, layers, models
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
import argparse
from tensorflow.keras.utils import to_categorical
from imutils import paths
from tensorflow.keras.optimizers import SGD
from keras import Sequential
from sklearn import manifold
import glob2
from matplotlib.offsetbox import OffsetImage, AnnotationBbox

from load_images import load_datasets
from dataset_statistics import class_counter, plot_classes_count, dataframe_classes_count

test_path = "/content/drive/MyDrive/Inż/data/Testing"
train_path = "/content/drive/MyDrive/Inż/data/Training"

image_size = (250,250)
batch_size = 32

train_dataset, val_dataset, test_dataset = load_datasets(image_size, train_path, test_path, batch_size)

glioma_train_count, meningioma_train_count, no_train_count, pituitary_train_count = class_counter(train_dataset)
glioma_val_count, meningioma_val_count, no_val_count, pituitary_val_count = class_counter(val_dataset)
glioma_test_count, meningioma_test_count, no_test_count, pituitary_test_count = class_counter(test_dataset)

labels = ['Glioma tumor', 'Meningioma tumor', 'No tumor', 'Pituitary tumor']
figsize = (14,30)
fontsize = 20

plot_classes_count(figsize, fontsize, labels, glioma_train_count, meningioma_train_count, no_train_count, pituitary_train_count, glioma_val_count, meningioma_val_count, no_val_count, pituitary_val_count, glioma_test_count, meningioma_test_count, no_test_count, pituitary_test_count)

dataframe_classes_count(labels, glioma_train_count, meningioma_train_count, no_train_count, pituitary_train_count, glioma_val_count, meningioma_val_count, no_val_count, pituitary_val_count, glioma_test_count, meningioma_test_count, no_test_count, pituitary_test_count)

from visualize_images import img_viz

img_viz(train_path, test_path)

from models import BrainTumorMRIModel4, BrainTumorMRIModel6

from training_and_validation import train_and_val, train_and_val_aug

from training_and_validation import optimizer, loss_fn, metric

from confusion_matrix_and_report import confusion_matrix_and_report

epochs = 5

model = BrainTumorMRIModel6()
model.compile(optimizer, loss_fn, metric)
model, ta, tl, va, vl = train_and_val(model, epochs, optimizer, train_dataset, val_dataset)

cm, report = confusion_matrix_and_report(model, test_dataset)

sns.heatmap(cm,annot=True, fmt="d")

print(report)

from latentspace_tsne import embedding, t_sne, viz_tsne, viz_tsne_img

x, y = embedding(test_dataset, model)

tx,ty,tsne = t_sne(x,y)

image_names  =glob2.glob('/content/drive/MyDrive/Inż/data/Testing/glioma_tumor' + "**/*.jpg")
image_names  +=glob2.glob('/content/drive/MyDrive/Inż/data/Testing/meningioma_tumor' + "**/*.jpg")
image_names  +=glob2.glob('/content/drive/MyDrive/Inż/data/Testing/no_tumor' + "**/*.jpg")
image_names  +=glob2.glob('/content/drive/MyDrive/data/Inż/Testing/pituitary_tumor' + "**/*.jpg")

viz_tsne(tsne)

viz_tsne_img(tx,ty,image_names)

from augmentation import aug1, aug2, aug3, aug4, aug5, viz_aug

img = '/content/drive/MyDrive/Inż/data/Testing/meningioma_tumor/image(31).jpg'

viz_aug(img)

model_aug = BrainTumorMRIModel6()
model_aug.compile(optimizer, loss_fn, metric)
model_aug, ta_aug, tl_aug, va_aug, vl_aug = train_and_val_aug(model_aug, epochs, optimizer, train_dataset, val_dataset, aug1)

leg = ['Original', 'Augmentation 1']

plt.figure(figsize=(20,20), dpi=300)
plt.subplot(2,2,1)
plt.plot(range(1,6), ta)
plt.plot(range(1,6), ta_aug)
plt.title('Training accuracy', fontsize=26)
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend(leg, loc='lower right', fontsize=15)
plt.grid(True)
plt.subplot(2,2,2)
plt.plot(range(1,6), va)
plt.plot(range(1,6), va_aug)
plt.title('Validation accuracy', fontsize=26)
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend(leg, loc='lower right', fontsize=15)
plt.grid(True)
plt.subplot(2,2,3)
plt.plot(range(1,6), tl)
plt.plot(range(1,6), tl_aug)
plt.title('Training loss', fontsize=26)
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend(leg, loc='upper right', fontsize=15)
plt.grid(True)
plt.subplot(2,2,4)
plt.plot(range(1,6), vl)
plt.plot(range(1,6), vl_aug)
plt.title('Validation loss', fontsize=26)
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend(leg, loc='upper right', fontsize=15)
plt.grid(True)
plt.show()